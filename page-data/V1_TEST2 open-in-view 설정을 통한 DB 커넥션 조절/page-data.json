{"componentChunkName":"component---src-templates-blog-post-js","path":"/V1_TEST2 open-in-view 설정을 통한 DB 커넥션 조절/","result":{"data":{"site":{"siteMetadata":{"title":"생각하면서 개발하기"}},"markdownRemark":{"id":"f4d6818c-f068-5973-8e83-6b949bb21cc2","excerpt":"✅  가 무엇인가? 📌 \"JPA가 DB 연결을 언제까지 열어놓을까?\" 를 정하는 설정  (기본값) → HTTP 응답을 브라우저에 보낼 때까지 DB 연결을 유지함.  → 서비스 메서드(@Transactional) 끝나면 바로 DB 연결을 닫음. 즉, 면 좀 더 빨리 DB…","html":"<h2>✅  <code class=\"language-text\">open-in-view</code>가 무엇인가?</h2>\n<blockquote>\n<p>📌 \"JPA가 DB 연결을 언제까지 열어놓을까?\" 를 정하는 설정</p>\n</blockquote>\n<ul>\n<li>\n<p><code class=\"language-text\">true</code> (기본값)</p>\n<p>→ <strong>HTTP 응답을 브라우저에 보낼 때까지</strong> DB 연결을 유지함.</p>\n</li>\n<li>\n<p><code class=\"language-text\">false</code></p>\n<p>→ <strong>서비스 메서드(@Transactional) 끝나면 바로</strong> DB 연결을 닫음.</p>\n</li>\n</ul>\n<p>즉, <code class=\"language-text\">false</code>면 <strong>좀 더 빨리</strong> DB 자원을 정리하지만  <strong>지연 로딩</strong>이 깨질 수 있음.</p>\n<h3>비유로 설명하면…</h3>\n<blockquote>\n<p>“마트에서 물건 담기 vs 계산하기”</p>\n</blockquote>\n<ul>\n<li><code class=\"language-text\">true</code>: 계산대에 가서도 물건을 더 담을 수 있음. (편함)</li>\n<li><code class=\"language-text\">false</code>: 물건 담기는 상품 진열대 앞에서만 끝내야 하고, 계산대 가면 더 이상 담을 수 없음. (빨리 정리됨, 하지만 불편)</li>\n</ul>\n<p>이제 <code class=\"language-text\">false</code>일 때는 <strong>물건을 미리 다 담아야 하니까</strong>,</p>\n<p><strong>서둘러 이것저것 미리 처리</strong>해야 함.</p>\n<p>→ 이게 <strong>오히려 느려지게</strong> 만들 수 있음.</p>\n<p>예를 들어, 연관 데이터(User, Ticket, UserTicket 등)를 <strong>미리 다 불러와야</strong> 해서 <strong>DB 부하가 커지거나 락이 오래 유지될 수 있다.</strong></p>\n<p>대규모 요청이 발생하는 상황에서는 “하나라도 더 빨리 DB 커넥션을 회수”하는 게 중요하기 때문에 open-in-view : false로 둔다.</p>\n<table>\n<thead>\n<tr>\n<th>설정</th>\n<th>특징</th>\n<th>언제 추천?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">open-in-view: true</code></td>\n<td>느슨함. 늦게까지 DB 열어둠.</td>\n<td>개발 편하게 할 때</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">open-in-view: false</code></td>\n<td>엄격함. 트랜잭션 끝나면 DB 닫음.</td>\n<td>대규모 성능 최적화할 때</td>\n</tr>\n</tbody>\n</table>\n<h1>🔗 Fetch Join + DTO 조합</h1>\n<ul>\n<li>\n<p>코드 보기</p>\n<h3><strong>Fetch Join 사용</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LockModeType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PESSIMISTIC_WRITE</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"\n    select t from TicketV1 t\n    left join fetch t.userTickets ut\n    left join fetch ut.user\n    where t.ticketId = :ticketId\n    \"\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TicketV1</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByIdForUpdateWithUsers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> ticketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3><strong>서비스 레이어</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Ticket</span> <span class=\"token function\">reserveTicket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> ticketId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>> reserveTicket called: userId = {}, ticketId = {}\"</span><span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">,</span> ticketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// user는 fetch join 하지 않았으므로 별도로 조회</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// fetch join으로 모든 필요한 정보 로딩</span>\n        <span class=\"token class-name\">Ticket</span> ticket <span class=\"token operator\">=</span> ticketRepositoryV1<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdForUpdateNative</span><span class=\"token punctuation\">(</span>ticketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userTicketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">existsByUser_UserIdAndTicket_TicketId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> ticketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이미 예약한 유저입니다. userId={}, ticketId={}\"</span><span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">,</span> ticketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> ticket<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 중복이면 insert 안 하고 그냥 리턴</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">.</span><span class=\"token function\">getQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ticket out of stock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        ticket<span class=\"token punctuation\">.</span><span class=\"token function\">setQuantity</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">.</span><span class=\"token function\">getQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        userTicketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserTicket</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ticket<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3><strong>응답 객체 DTO</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">TicketReserveResponse</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">Long</span> ticketId<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">String</span> ticketName<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">int</span> remainingQuantity<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">String</span> reservedByUsername\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TicketReserveResponse</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TicketV1</span> ticket<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserV1</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TicketReserveResponse</span><span class=\"token punctuation\">(</span>\n            ticket<span class=\"token punctuation\">.</span><span class=\"token function\">getTicketId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            ticket<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            ticket<span class=\"token punctuation\">.</span><span class=\"token function\">getQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3><strong>컨트롤러</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TicketReserveResponse</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">Long</span> ticketId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TicketV1</span> ticket <span class=\"token operator\">=</span> reserveServiceV1<span class=\"token punctuation\">.</span><span class=\"token function\">reserveTicket</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> ticketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UserV1</span> user <span class=\"token operator\">=</span> userRepositoryV1<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TicketReserveResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"예약 실패: {}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BAD_REQUEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<p><strong><code class=\"language-text\">open-in-view: false</code></strong> 에서는 <strong>트랜잭션 안에서 모든 걸 끝내야 하므로</strong>\n→ <strong>Fetch Join</strong>과 <strong>DTO 변환</strong>을 사용해 미리 필요한 데이터를 다 불러와야 한다.</p>\n<ul>\n<li>\n<p><strong>결과</strong> :</p>\n<p><strong>Average</strong>: 69,005ms (← 이전보다 훨씬 더 느림), <strong>Throughput</strong>: 64.9/sec</p>\n</li>\n<li>\n<p><strong>이유</strong></p>\n<ol>\n<li>\n<p><strong>비관적 락 자체의 비용이 큼</strong></p>\n<ul>\n<li>트랜잭션이 길어질수록 락 보유 시간도 증가 → 지연이 누적됨.</li>\n<li><strong>동시에 10000명이 몰리면</strong>, 락이 걸린 다른 요청은 <strong>대기하게 되므로 전체 응답 속도가 늘어나고 Throughput 감소</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>Fetch Join은 결과적으로 더 많은 데이터를 불러오고 락을 지연시킴</strong></p>\n<ul>\n<li><code class=\"language-text\">userTickets</code>, <code class=\"language-text\">users</code>까지 <code class=\"language-text\">JOIN FETCH</code>하면 → 데이터양 × 조인카디널리티 증가.</li>\n<li>DB 입장에선 <strong>락을 유지한 채 더 많은 데이터를 처리</strong> → 락 보유 시간 증가 → 전체 요청 지연됨.</li>\n</ul>\n</li>\n<li>\n<p><strong>open-in-view: false 설정은 잘못 사용하면 Lazy 예외는 방지하나 트랜잭션 범위가 커지기 쉬움</strong></p>\n<ul>\n<li>\n<p>DTO로 만드는 과정도 트랜잭션 내에서 끝내야 하므로 → <strong>트랜잭션 종료 지점이 늦어짐</strong>.</p>\n<p>→ <strong>락이 오래 유지</strong>되고, 다음 요청들이 더 많이 밀리게 됨.</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>해결 방법</strong></p>\n<h3><strong>✅ 불필요한 Fetch Join 제거</strong></h3>\n<p>→ Ticket만 락 걸고, 연관 객체는 Lazy로 분리하거나 별도로 필요 시 조회.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Lock</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PESSIMISTIC_WRITE</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select t from TicketV1 t where t.ticketId = :ticketId\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TicketV1</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByIdForUpdate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> ticketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"","date":null,"description":null}},"previous":{"fields":{"slug":"/test-post/"},"frontmatter":{"title":"Test Post"}},"next":{"fields":{"slug":"/V1_TEST1 DB 비관적 락을 이용한 동시성 제어 및 성능 향상/"},"frontmatter":{"title":""}}},"pageContext":{"id":"f4d6818c-f068-5973-8e83-6b949bb21cc2","previousPostId":"9f384cd9-2b83-584c-ba0d-0bfc6048a0f3","nextPostId":"b10bc89f-43d1-53f3-884f-b6ed6fa27f86"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}