{"componentChunkName":"component---src-templates-blog-post-js","path":"/hello/","result":{"data":{"site":{"siteMetadata":{"title":"생각하면서 개발하기"}},"markdownRemark":{"id":"fe84cafb-7960-5138-974e-7d3a27e02e97","excerpt":"🎟️ 동시성 환경에서 DB 락을 이용한 티켓 예약 시스템 테스트 ✅ 테스트 목표 100개의 티켓을 대상으로 수천 명의 유저가 동시에 예약 요청을 보냈을 때, 동시성 이슈 없이 정확히 100명까지만 예약되도록 제어되는지 검증한다.…","html":"<h1>🎟️ 동시성 환경에서 DB 락을 이용한 티켓 예약 시스템 테스트</h1>\n<h2>✅ 테스트 목표</h2>\n<blockquote>\n<p>100개의 티켓을 대상으로 수천 명의 유저가 동시에 예약 요청을 보냈을 때,</p>\n<p>동시성 이슈 없이 정확히 100명까지만 예약되도록 제어되는지 검증한다.</p>\n</blockquote>\n<h2>1️⃣ 락을 사용하지 않은 경우</h2>\n<p>🔗 <a href=\"https://www.notion.so/1e6ec761786c80e79875eb0214e770e8?pvs=21\">코드 보기</a></p>\n<ul>\n<li>\n<p><strong>설명</strong>:</p>\n<p>동시성 제어 없이 <code class=\"language-text\">reserveTicket()</code>을 호출한 기본 구현.</p>\n</li>\n<li>\n<p><strong>시나리오</strong>:</p>\n<p><code class=\"language-text\">1000명의 사용자</code>가 동시에 100개의 티켓을 예약 시도.</p>\n</li>\n<li>\n<p><strong>결과</strong>:</p>\n<p>❌ <strong>테스트 실패</strong> – 동시성 제어 부재로 <strong>티켓 수량 초과 예약 발생</strong>.</p>\n</li>\n</ul>\n<h2>2️⃣-1 비관적 락(Pessimistic Lock)을 적용한 경우</h2>\n<p>🔗 <a href=\"https://www.notion.so/1e6ec761786c8071b72aed507a6744b0?pvs=21\">코드 보기</a></p>\n<ul>\n<li>\n<p><strong>설명</strong>:</p>\n<p><code class=\"language-text\">@Lock(LockModeType.PESSIMISTIC_WRITE)</code>를 적용해 동시에 하나의 티켓만 수정 가능하도록 제한.</p>\n</li>\n<li>\n<p><strong>시나리오</strong>:</p>\n<p><code class=\"language-text\">10000명의 사용자</code>가 동시에 100개의 티켓을 예약 시도.</p>\n</li>\n<li>\n<p><strong>결과</strong>:</p>\n<p>✅ <strong>테스트 성공</strong> – 정확히 <code class=\"language-text\">100명만 예약</code>됨.</p>\n</li>\n<li>\n<p>문제점:</p>\n<ul>\n<li>사용자 10,000명을 <code class=\"language-text\">개별적으로 저장</code>해 테스트 시간이 매우 길어짐.\n<ul>\n<li><strong>해결 방법</strong> : <strong>벌크 Insert (<code class=\"language-text\">saveAll()</code>) 사용</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>2️⃣-2 saveAll() 활용한 벌크 Insert 시도</h2>\n<p>🔗 <a href=\"https://www.notion.so/1e7ec761786c8029b92ec2956086b59f?pvs=21\">코드 보기</a></p>\n<ul>\n<li>\n<p><strong>설명</strong>:</p>\n<p><code class=\"language-text\">saveAll()</code>로 사용자 10,000명을 한 번에 저장.</p>\n</li>\n<li>\n<p><strong>문제점</strong>:</p>\n<ul>\n<li>내부적으로 여전히 <code class=\"language-text\">persist()</code>를 루프 돌며 호출 → <code class=\"language-text\">쿼리 N번 발생</code>.</li>\n<li>즉, <strong>실제 벌크 성능은 기대보다 낮음</strong>.</li>\n</ul>\n</li>\n<li>\n<p><strong>해결 방안</strong>:</p>\n<p>Hibernate의 <strong>Batch Insert 설정</strong> + <code class=\"language-text\">EntityManager</code> 직접 사용.</p>\n</li>\n</ul>\n<h2>2️⃣-3 EntityManager + @Transactional 방식 적용</h2>\n<p>🔗 <a href=\"https://www.notion.so/1e7ec761786c801f9749e72c3c3e3177?pvs=21\">코드 보기</a></p>\n<ul>\n<li>\n<p><strong>설명</strong>:</p>\n<p><code class=\"language-text\">@PersistenceContext</code>로 주입한 <code class=\"language-text\">EntityManager</code>를 통해 <code class=\"language-text\">flush()</code> &#x26; <code class=\"language-text\">clear()</code>를 주기적으로 호출하며 batch 처리.</p>\n</li>\n<li>\n<p><strong>문제 발생</strong>:\n❌ <strong><code class=\"language-text\">@Transactional</code>이 적용되지 않음</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n@Transactional self-invocation (in effect, a method within the target object calling another method of the target object) does not lead to an actual transaction at runtime</code></pre></div>\n</li>\n<li>\n<p><strong>이유</strong>:</p>\n<ul>\n<li>Spring은 <strong>AOP 기반으로 트랜잭션 처리</strong></li>\n<li><strong>같은 클래스 내에서 메서드 호출(this)</strong> → <strong>프록시 우회</strong> → 트랜잭션 적용 안 됨</li>\n</ul>\n</li>\n</ul>\n<h2>2️⃣-4 Self-Invocation 문제 해결: Self 주입 구조 도입</h2>\n<p>🔗 <a href=\"https://www.notion.so/1e7ec761786c803aa370e19889828cbb?pvs=21\">코드 보기</a></p>\n<ul>\n<li>\n<p><strong>설명</strong>:</p>\n<p><code class=\"language-text\">this.insertUsersInBulk()</code> 대신, <strong>Bean으로 주입된 자신(Self)</strong> 을 통해 호출</p>\n</li>\n<li>\n<p><strong>문제 발생</strong>:\n❌ 테스트 클래스에 <code class=\"language-text\">@Autowired TicketReservationServiceTest</code> →</p>\n<p><code class=\"language-text\">Could not autowire. No beans of 'TicketReservationServiceTest' type found.</code></p>\n</li>\n<li>\n<p><strong>이유</strong>:</p>\n</li>\n<li>\n<p><code class=\"language-text\">@Transactional</code>이 붙은 <code class=\"language-text\">insertUsersInBulk()</code>를 같은 클래스 내에서 호출하고 있어서 <strong>트랜잭션이 적용되지 않고</strong>, 그 결과 <code class=\"language-text\">EntityManager</code>가 트랜잭션 바깥에서 실행되며 오류가 발생</p>\n</li>\n<li>\n<p>테스트 클래스는 <code class=\"language-text\">@SpringBootTest</code>로 실행되지만, 일반적인 <strong>Spring Bean으로 등록되지 않음</strong></p>\n</li>\n</ul>\n<h2>2️⃣-5 최종 해결 – 벌크 Insert 전용 서비스 분리</h2>\n<p>🔗 <a href=\"https://www.notion.so/1e7ec761786c801c8bade22af1bdabc2?pvs=21\">코드 보기</a></p>\n<ul>\n<li>\n<p><strong>설명</strong>:\n<code class=\"language-text\">@Service</code> 클래스로 <code class=\"language-text\">InsertUsersInBulkService</code>를 분리하고,</p>\n<p>여기에 <code class=\"language-text\">@Transactional</code>과 <code class=\"language-text\">EntityManager</code>를 적용해 올바른 트랜잭션 처리 구현.</p>\n</li>\n<li>\n<p><strong>결과</strong>:\n<strong>트랜잭션 정상 동작 + 빠른 대용량 insert 처리</strong></p>\n<p><strong>테스트 성공</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>테스트 방식</th>\n<th>결과</th>\n<th>동시성 제어</th>\n<th>성능 문제</th>\n<th>트랜잭션 문제</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>단순 로직</td>\n<td>❌ 실패</td>\n<td>❌ 없음</td>\n<td>❌ 느림</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Pessimistic Lock</td>\n<td>✅ 성공</td>\n<td>✅ 있음</td>\n<td>❌ 느림</td>\n<td>-</td>\n</tr>\n<tr>\n<td>saveAll()</td>\n<td>✅ 성공</td>\n<td>✅ 있음</td>\n<td>⚠️ 기대 이하</td>\n<td>-</td>\n</tr>\n<tr>\n<td>EntityManager</td>\n<td>❌ 실패</td>\n<td>✅ 있음</td>\n<td>✅ 빠름</td>\n<td>❌ 적용 안 됨</td>\n</tr>\n<tr>\n<td>Self 주입 구조</td>\n<td>❌ 실패</td>\n<td>✅ 있음</td>\n<td>✅ 빠름</td>\n<td>❌ 테스트 클래스 불가</td>\n</tr>\n<tr>\n<td>서비스 분리</td>\n<td>✅ 성공</td>\n<td>✅ 있음</td>\n<td>✅ 빠름</td>\n<td>✅ 정상 동작</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>🖋️ Written by <a href=\"https://github.com/tmdals1207\">홍승민</a></p>","frontmatter":{"title":"","date":null,"description":null}},"previous":{"fields":{"slug":"/test-post/"},"frontmatter":{"title":"Test Post"}},"next":{"fields":{"slug":"/test1/"},"frontmatter":{"title":""}}},"pageContext":{"id":"fe84cafb-7960-5138-974e-7d3a27e02e97","previousPostId":"9f384cd9-2b83-584c-ba0d-0bfc6048a0f3","nextPostId":"7d953357-bccc-55b1-8700-4dc76837a96e"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}