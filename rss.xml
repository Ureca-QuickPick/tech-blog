<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 02 May 2025 02:26:42 GMT</lastBuildDate><item><title><![CDATA[No title]]></title><description><![CDATA[🎟️ 동시성 환경에서 DB 락을 이용한 티켓 예약 시스템 테스트 ✅ 테스트 목표 100개의 티켓을 대상으로 수천 명의 유저가 동시에 예약 요청을 보냈을 때, 동시성 이슈 없이 정확히 100명까지만 예약되도록 제어되는지 검증한다.…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/hello/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/hello/</guid><content:encoded>&lt;h1&gt;🎟️ 동시성 환경에서 DB 락을 이용한 티켓 예약 시스템 테스트&lt;/h1&gt;
&lt;h2&gt;✅ 테스트 목표&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;100개의 티켓을 대상으로 수천 명의 유저가 동시에 예약 요청을 보냈을 때,&lt;/p&gt;
&lt;p&gt;동시성 이슈 없이 정확히 100명까지만 예약되도록 제어되는지 검증한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;1️⃣ 락을 사용하지 않은 경우&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e6ec761786c80e79875eb0214e770e8?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;동시성 제어 없이 &lt;code class=&quot;language-text&quot;&gt;reserveTicket()&lt;/code&gt;을 호출한 기본 구현.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;시나리오&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1000명의 사용자&lt;/code&gt;가 동시에 100개의 티켓을 예약 시도.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;결과&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;❌ &lt;strong&gt;테스트 실패&lt;/strong&gt; – 동시성 제어 부재로 &lt;strong&gt;티켓 수량 초과 예약 발생&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2️⃣-1 비관적 락(Pessimistic Lock)을 적용한 경우&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e6ec761786c8071b72aed507a6744b0?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Lock(LockModeType.PESSIMISTIC_WRITE)&lt;/code&gt;를 적용해 동시에 하나의 티켓만 수정 가능하도록 제한.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;시나리오&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;10000명의 사용자&lt;/code&gt;가 동시에 100개의 티켓을 예약 시도.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;결과&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;✅ &lt;strong&gt;테스트 성공&lt;/strong&gt; – 정확히 &lt;code class=&quot;language-text&quot;&gt;100명만 예약&lt;/code&gt;됨.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;문제점:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 10,000명을 &lt;code class=&quot;language-text&quot;&gt;개별적으로 저장&lt;/code&gt;해 테스트 시간이 매우 길어짐.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;해결 방법&lt;/strong&gt; : &lt;strong&gt;벌크 Insert (&lt;code class=&quot;language-text&quot;&gt;saveAll()&lt;/code&gt;) 사용&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2️⃣-2 saveAll() 활용한 벌크 Insert 시도&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e7ec761786c8029b92ec2956086b59f?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;saveAll()&lt;/code&gt;로 사용자 10,000명을 한 번에 저장.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;문제점&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내부적으로 여전히 &lt;code class=&quot;language-text&quot;&gt;persist()&lt;/code&gt;를 루프 돌며 호출 → &lt;code class=&quot;language-text&quot;&gt;쿼리 N번 발생&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;즉, &lt;strong&gt;실제 벌크 성능은 기대보다 낮음&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;해결 방안&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Hibernate의 &lt;strong&gt;Batch Insert 설정&lt;/strong&gt; + &lt;code class=&quot;language-text&quot;&gt;EntityManager&lt;/code&gt; 직접 사용.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2️⃣-3 EntityManager + @Transactional 방식 적용&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e7ec761786c801f9749e72c3c3e3177?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@PersistenceContext&lt;/code&gt;로 주입한 &lt;code class=&quot;language-text&quot;&gt;EntityManager&lt;/code&gt;를 통해 &lt;code class=&quot;language-text&quot;&gt;flush()&lt;/code&gt; &amp;#x26; &lt;code class=&quot;language-text&quot;&gt;clear()&lt;/code&gt;를 주기적으로 호출하며 batch 처리.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;문제 발생&lt;/strong&gt;:
❌ &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt;이 적용되지 않음&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;
@Transactional self-invocation (in effect, a method within the target object calling another method of the target object) does not lead to an actual transaction at runtime&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;이유&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring은 &lt;strong&gt;AOP 기반으로 트랜잭션 처리&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;같은 클래스 내에서 메서드 호출(this)&lt;/strong&gt; → &lt;strong&gt;프록시 우회&lt;/strong&gt; → 트랜잭션 적용 안 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2️⃣-4 Self-Invocation 문제 해결: Self 주입 구조 도입&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e7ec761786c803aa370e19889828cbb?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;this.insertUsersInBulk()&lt;/code&gt; 대신, &lt;strong&gt;Bean으로 주입된 자신(Self)&lt;/strong&gt; 을 통해 호출&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;문제 발생&lt;/strong&gt;:
❌ 테스트 클래스에 &lt;code class=&quot;language-text&quot;&gt;@Autowired TicketReservationServiceTest&lt;/code&gt; →&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Could not autowire. No beans of &apos;TicketReservationServiceTest&apos; type found.&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;이유&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt;이 붙은 &lt;code class=&quot;language-text&quot;&gt;insertUsersInBulk()&lt;/code&gt;를 같은 클래스 내에서 호출하고 있어서 &lt;strong&gt;트랜잭션이 적용되지 않고&lt;/strong&gt;, 그 결과 &lt;code class=&quot;language-text&quot;&gt;EntityManager&lt;/code&gt;가 트랜잭션 바깥에서 실행되며 오류가 발생&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 클래스는 &lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt;로 실행되지만, 일반적인 &lt;strong&gt;Spring Bean으로 등록되지 않음&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2️⃣-5 최종 해결 – 벌크 Insert 전용 서비스 분리&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e7ec761786c801c8bade22af1bdabc2?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:
&lt;code class=&quot;language-text&quot;&gt;@Service&lt;/code&gt; 클래스로 &lt;code class=&quot;language-text&quot;&gt;InsertUsersInBulkService&lt;/code&gt;를 분리하고,&lt;/p&gt;
&lt;p&gt;여기에 &lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;EntityManager&lt;/code&gt;를 적용해 올바른 트랜잭션 처리 구현.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;결과&lt;/strong&gt;:
&lt;strong&gt;트랜잭션 정상 동작 + 빠른 대용량 insert 처리&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;테스트 성공&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;테스트 방식&lt;/th&gt;
&lt;th&gt;결과&lt;/th&gt;
&lt;th&gt;동시성 제어&lt;/th&gt;
&lt;th&gt;성능 문제&lt;/th&gt;
&lt;th&gt;트랜잭션 문제&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;단순 로직&lt;/td&gt;
&lt;td&gt;❌ 실패&lt;/td&gt;
&lt;td&gt;❌ 없음&lt;/td&gt;
&lt;td&gt;❌ 느림&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pessimistic Lock&lt;/td&gt;
&lt;td&gt;✅ 성공&lt;/td&gt;
&lt;td&gt;✅ 있음&lt;/td&gt;
&lt;td&gt;❌ 느림&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;saveAll()&lt;/td&gt;
&lt;td&gt;✅ 성공&lt;/td&gt;
&lt;td&gt;✅ 있음&lt;/td&gt;
&lt;td&gt;⚠️ 기대 이하&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EntityManager&lt;/td&gt;
&lt;td&gt;❌ 실패&lt;/td&gt;
&lt;td&gt;✅ 있음&lt;/td&gt;
&lt;td&gt;✅ 빠름&lt;/td&gt;
&lt;td&gt;❌ 적용 안 됨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Self 주입 구조&lt;/td&gt;
&lt;td&gt;❌ 실패&lt;/td&gt;
&lt;td&gt;✅ 있음&lt;/td&gt;
&lt;td&gt;✅ 빠름&lt;/td&gt;
&lt;td&gt;❌ 테스트 클래스 불가&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;서비스 분리&lt;/td&gt;
&lt;td&gt;✅ 성공&lt;/td&gt;
&lt;td&gt;✅ 있음&lt;/td&gt;
&lt;td&gt;✅ 빠름&lt;/td&gt;
&lt;td&gt;✅ 정상 동작&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;🖋️ Written by &lt;a href=&quot;https://github.com/tmdals1207&quot;&gt;홍승민&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[test a123123das]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/test1/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/test1/</guid><content:encoded>&lt;h2&gt;test&lt;/h2&gt;
&lt;p&gt;a123123das&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Test Post]]></title><description><![CDATA[테스트용 블로그 테스트용 게시물입니다.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/test-post/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/test-post/</guid><pubDate>Fri, 02 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;테스트용 블로그&lt;/h1&gt;
&lt;p&gt;테스트용 게시물입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello Gatsby!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item></channel></rss>