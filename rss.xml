<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 08 May 2025 07:45:39 GMT</lastBuildDate><item><title><![CDATA[No title]]></title><description><![CDATA[✅  가 무엇인가? 📌 "JPA가 DB 연결을 언제까지 열어놓을까?" 를 정하는 설정  (기본값) → HTTP 응답을 브라우저에 보낼 때까지 DB 연결을 유지함.  → 서비스 메서드(@Transactional) 끝나면 바로 DB…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/V1_TEST2 open-in-view 설정을 통한 DB 커넥션 조절/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/V1_TEST2 open-in-view 설정을 통한 DB 커넥션 조절/</guid><content:encoded>&lt;h2&gt;✅  &lt;code class=&quot;language-text&quot;&gt;open-in-view&lt;/code&gt;가 무엇인가?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;📌 &quot;JPA가 DB 연결을 언제까지 열어놓을까?&quot; 를 정하는 설정&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; (기본값)&lt;/p&gt;
&lt;p&gt;→ &lt;strong&gt;HTTP 응답을 브라우저에 보낼 때까지&lt;/strong&gt; DB 연결을 유지함.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;→ &lt;strong&gt;서비스 메서드(@Transactional) 끝나면 바로&lt;/strong&gt; DB 연결을 닫음.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉, &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;면 &lt;strong&gt;좀 더 빨리&lt;/strong&gt; DB 자원을 정리하지만  &lt;strong&gt;지연 로딩&lt;/strong&gt;이 깨질 수 있음.&lt;/p&gt;
&lt;h3&gt;비유로 설명하면…&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“마트에서 물건 담기 vs 계산하기”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;: 계산대에 가서도 물건을 더 담을 수 있음. (편함)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;: 물건 담기는 상품 진열대 앞에서만 끝내야 하고, 계산대 가면 더 이상 담을 수 없음. (빨리 정리됨, 하지만 불편)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이제 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;일 때는 &lt;strong&gt;물건을 미리 다 담아야 하니까&lt;/strong&gt;,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;서둘러 이것저것 미리 처리&lt;/strong&gt;해야 함.&lt;/p&gt;
&lt;p&gt;→ 이게 &lt;strong&gt;오히려 느려지게&lt;/strong&gt; 만들 수 있음.&lt;/p&gt;
&lt;p&gt;예를 들어, 연관 데이터(User, Ticket, UserTicket 등)를 &lt;strong&gt;미리 다 불러와야&lt;/strong&gt; 해서 &lt;strong&gt;DB 부하가 커지거나 락이 오래 유지될 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;대규모 요청이 발생하는 상황에서는 “하나라도 더 빨리 DB 커넥션을 회수”하는 게 중요하기 때문에 open-in-view : false로 둔다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;설정&lt;/th&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;th&gt;언제 추천?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;open-in-view: true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;느슨함. 늦게까지 DB 열어둠.&lt;/td&gt;
&lt;td&gt;개발 편하게 할 때&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;open-in-view: false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;엄격함. 트랜잭션 끝나면 DB 닫음.&lt;/td&gt;
&lt;td&gt;대규모 성능 최적화할 때&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;🔗 Fetch Join + DTO 조합&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;코드 보기&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Fetch Join 사용&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LockModeType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PESSIMISTIC_WRITE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;
    select t from TicketV1 t
    left join fetch t.userTickets ut
    left join fetch ut.user
    where t.ticketId = :ticketId
    &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TicketV1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findByIdForUpdateWithUsers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; ticketId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;서비스 레이어&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Transactional&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Ticket&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reserveTicket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; ticketId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

        log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&gt;&gt;&gt; reserveTicket called: userId = {}, ticketId = {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ticketId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// user는 fetch join 하지 않았으므로 별도로 조회&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; userRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;User not found&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// fetch join으로 모든 필요한 정보 로딩&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Ticket&lt;/span&gt; ticket &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ticketRepositoryV1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findByIdForUpdateNative&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ticketId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userTicketRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;existsByUser_UserIdAndTicket_TicketId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ticketId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;이미 예약한 유저입니다. userId={}, ticketId={}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ticketId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ticket&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 중복이면 insert 안 하고 그냥 리턴&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ticket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getQuantity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ticket out of stock&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        ticket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setQuantity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ticket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getQuantity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        userTicketRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserTicket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ticket&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ticket&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;응답 객체 DTO&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TicketReserveResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; ticketId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; ticketName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; remainingQuantity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; reservedByUsername
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TicketReserveResponse&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TicketV1&lt;/span&gt; ticket&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserV1&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TicketReserveResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            ticket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTicketId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            ticket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            ticket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getQuantity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;컨트롤러&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@PostMapping&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TicketReserveResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; ticketId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;TicketV1&lt;/span&gt; ticket &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reserveServiceV1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reserveTicket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ticketId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;UserV1&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; userRepositoryV1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TicketReserveResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ticket&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;예약 실패: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;open-in-view: false&lt;/code&gt;&lt;/strong&gt; 에서는 &lt;strong&gt;트랜잭션 안에서 모든 걸 끝내야 하므로&lt;/strong&gt;
→ &lt;strong&gt;Fetch Join&lt;/strong&gt;과 &lt;strong&gt;DTO 변환&lt;/strong&gt;을 사용해 미리 필요한 데이터를 다 불러와야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;결과&lt;/strong&gt; :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Average&lt;/strong&gt;: 69,005ms (← 이전보다 훨씬 더 느림), &lt;strong&gt;Throughput&lt;/strong&gt;: 64.9/sec&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;이유&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;비관적 락 자체의 비용이 큼&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;트랜잭션이 길어질수록 락 보유 시간도 증가 → 지연이 누적됨.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;동시에 10000명이 몰리면&lt;/strong&gt;, 락이 걸린 다른 요청은 &lt;strong&gt;대기하게 되므로 전체 응답 속도가 늘어나고 Throughput 감소&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fetch Join은 결과적으로 더 많은 데이터를 불러오고 락을 지연시킴&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;userTickets&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;users&lt;/code&gt;까지 &lt;code class=&quot;language-text&quot;&gt;JOIN FETCH&lt;/code&gt;하면 → 데이터양 × 조인카디널리티 증가.&lt;/li&gt;
&lt;li&gt;DB 입장에선 &lt;strong&gt;락을 유지한 채 더 많은 데이터를 처리&lt;/strong&gt; → 락 보유 시간 증가 → 전체 요청 지연됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;open-in-view: false 설정은 잘못 사용하면 Lazy 예외는 방지하나 트랜잭션 범위가 커지기 쉬움&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DTO로 만드는 과정도 트랜잭션 내에서 끝내야 하므로 → &lt;strong&gt;트랜잭션 종료 지점이 늦어짐&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;→ &lt;strong&gt;락이 오래 유지&lt;/strong&gt;되고, 다음 요청들이 더 많이 밀리게 됨.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;해결 방법&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;✅ 불필요한 Fetch Join 제거&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;→ Ticket만 락 걸고, 연관 객체는 Lazy로 분리하거나 별도로 필요 시 조회.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PESSIMISTIC_WRITE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;select t from TicketV1 t where t.ticketId = :ticketId&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TicketV1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findByIdForUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; ticketId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[🎟️ 동시성 환경에서 DB 락을 이용한 티켓 예약 시스템 테스트 ✅ 테스트 목표 100개의 티켓을 대상으로 수천 명의 유저가 동시에 예약 요청을 보냈을 때, 동시성 이슈 없이 정확히 100명까지만 예약되도록 제어되는지 검증한다.…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/V1_TEST1 DB 비관적 락을 이용한 동시성 제어 및 성능 향상/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/V1_TEST1 DB 비관적 락을 이용한 동시성 제어 및 성능 향상/</guid><content:encoded>&lt;h1&gt;🎟️ 동시성 환경에서 DB 락을 이용한 티켓 예약 시스템 테스트&lt;/h1&gt;
&lt;h2&gt;✅ 테스트 목표&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;100개의 티켓을 대상으로 수천 명의 유저가 동시에 예약 요청을 보냈을 때,&lt;/p&gt;
&lt;p&gt;동시성 이슈 없이 정확히 100명까지만 예약되도록 제어되는지 검증한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;1️⃣ 락을 사용하지 않은 경우&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e6ec761786c80e79875eb0214e770e8?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;동시성 제어 없이 &lt;code class=&quot;language-text&quot;&gt;reserveTicket()&lt;/code&gt;을 호출한 기본 구현.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;시나리오&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1000명의 사용자&lt;/code&gt;가 동시에 100개의 티켓을 예약 시도.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;결과&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;❌ &lt;strong&gt;테스트 실패&lt;/strong&gt; – 동시성 제어 부재로 &lt;strong&gt;티켓 수량 초과 예약 발생&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2️⃣-1 비관적 락(Pessimistic Lock)을 적용한 경우&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e6ec761786c8071b72aed507a6744b0?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Lock(LockModeType.PESSIMISTIC_WRITE)&lt;/code&gt;를 적용해 동시에 하나의 티켓만 수정 가능하도록 제한.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;시나리오&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;10000명의 사용자&lt;/code&gt;가 동시에 100개의 티켓을 예약 시도.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;결과&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;✅ &lt;strong&gt;테스트 성공&lt;/strong&gt; – 정확히 &lt;code class=&quot;language-text&quot;&gt;100명만 예약&lt;/code&gt;됨.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;문제점:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 10,000명을 &lt;code class=&quot;language-text&quot;&gt;개별적으로 저장&lt;/code&gt;해 테스트 시간이 매우 길어짐.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;해결 방법&lt;/strong&gt; : &lt;strong&gt;벌크 Insert (&lt;code class=&quot;language-text&quot;&gt;saveAll()&lt;/code&gt;) 사용&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2️⃣-2 saveAll() 활용한 벌크 Insert 시도&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e7ec761786c8029b92ec2956086b59f?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;saveAll()&lt;/code&gt;로 사용자 10,000명을 한 번에 저장.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;문제점&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내부적으로 여전히 &lt;code class=&quot;language-text&quot;&gt;persist()&lt;/code&gt;를 루프 돌며 호출 → &lt;code class=&quot;language-text&quot;&gt;쿼리 N번 발생&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;즉, &lt;strong&gt;실제 벌크 성능은 기대보다 낮음&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;해결 방안&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Hibernate의 &lt;strong&gt;Batch Insert 설정&lt;/strong&gt; + &lt;code class=&quot;language-text&quot;&gt;EntityManager&lt;/code&gt; 직접 사용.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2️⃣-3 EntityManager + @Transactional 방식 적용&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e7ec761786c801f9749e72c3c3e3177?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@PersistenceContext&lt;/code&gt;로 주입한 &lt;code class=&quot;language-text&quot;&gt;EntityManager&lt;/code&gt;를 통해 &lt;code class=&quot;language-text&quot;&gt;flush()&lt;/code&gt; &amp;#x26; &lt;code class=&quot;language-text&quot;&gt;clear()&lt;/code&gt;를 주기적으로 호출하며 batch 처리.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;문제 발생&lt;/strong&gt;:
❌ &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt;이 적용되지 않음&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;
@Transactional self-invocation (in effect, a method within the target object calling another method of the target object) does not lead to an actual transaction at runtime&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;이유&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring은 &lt;strong&gt;AOP 기반으로 트랜잭션 처리&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;같은 클래스 내에서 메서드 호출(this)&lt;/strong&gt; → &lt;strong&gt;프록시 우회&lt;/strong&gt; → 트랜잭션 적용 안 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2️⃣-4 Self-Invocation 문제 해결: Self 주입 구조 도입&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e7ec761786c803aa370e19889828cbb?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;this.insertUsersInBulk()&lt;/code&gt; 대신, &lt;strong&gt;Bean으로 주입된 자신(Self)&lt;/strong&gt; 을 통해 호출&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;문제 발생&lt;/strong&gt;:
❌ 테스트 클래스에 &lt;code class=&quot;language-text&quot;&gt;@Autowired TicketReservationServiceTest&lt;/code&gt; →&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Could not autowire. No beans of &apos;TicketReservationServiceTest&apos; type found.&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;이유&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt;이 붙은 &lt;code class=&quot;language-text&quot;&gt;insertUsersInBulk()&lt;/code&gt;를 같은 클래스 내에서 호출하고 있어서 &lt;strong&gt;트랜잭션이 적용되지 않고&lt;/strong&gt;, 그 결과 &lt;code class=&quot;language-text&quot;&gt;EntityManager&lt;/code&gt;가 트랜잭션 바깥에서 실행되며 오류가 발생&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 클래스는 &lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt;로 실행되지만, 일반적인 &lt;strong&gt;Spring Bean으로 등록되지 않음&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2️⃣-5 최종 해결 – 벌크 Insert 전용 서비스 분리&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.notion.so/1e7ec761786c801c8bade22af1bdabc2?pvs=21&quot;&gt;코드 보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명&lt;/strong&gt;:
&lt;code class=&quot;language-text&quot;&gt;@Service&lt;/code&gt; 클래스로 &lt;code class=&quot;language-text&quot;&gt;InsertUsersInBulkService&lt;/code&gt;를 분리하고,&lt;/p&gt;
&lt;p&gt;여기에 &lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;EntityManager&lt;/code&gt;를 적용해 올바른 트랜잭션 처리 구현.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;결과&lt;/strong&gt;:
&lt;strong&gt;트랜잭션 정상 동작 + 빠른 대용량 insert 처리&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;테스트 성공&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;테스트 방식&lt;/th&gt;
&lt;th&gt;결과&lt;/th&gt;
&lt;th&gt;동시성 제어&lt;/th&gt;
&lt;th&gt;성능 문제&lt;/th&gt;
&lt;th&gt;트랜잭션 문제&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;단순 로직&lt;/td&gt;
&lt;td&gt;❌ 실패&lt;/td&gt;
&lt;td&gt;❌ 없음&lt;/td&gt;
&lt;td&gt;❌ 느림&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pessimistic Lock&lt;/td&gt;
&lt;td&gt;✅ 성공&lt;/td&gt;
&lt;td&gt;✅ 있음&lt;/td&gt;
&lt;td&gt;❌ 느림&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;saveAll()&lt;/td&gt;
&lt;td&gt;✅ 성공&lt;/td&gt;
&lt;td&gt;✅ 있음&lt;/td&gt;
&lt;td&gt;⚠️ 기대 이하&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EntityManager&lt;/td&gt;
&lt;td&gt;❌ 실패&lt;/td&gt;
&lt;td&gt;✅ 있음&lt;/td&gt;
&lt;td&gt;✅ 빠름&lt;/td&gt;
&lt;td&gt;❌ 적용 안 됨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Self 주입 구조&lt;/td&gt;
&lt;td&gt;❌ 실패&lt;/td&gt;
&lt;td&gt;✅ 있음&lt;/td&gt;
&lt;td&gt;✅ 빠름&lt;/td&gt;
&lt;td&gt;❌ 테스트 클래스 불가&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;서비스 분리&lt;/td&gt;
&lt;td&gt;✅ 성공&lt;/td&gt;
&lt;td&gt;✅ 있음&lt;/td&gt;
&lt;td&gt;✅ 빠름&lt;/td&gt;
&lt;td&gt;✅ 정상 동작&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;🖋️ Written by &lt;a href=&quot;https://github.com/tmdals1207&quot;&gt;홍승민&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[test a123123das]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/test1/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/test1/</guid><content:encoded>&lt;h2&gt;test&lt;/h2&gt;
&lt;p&gt;a123123das&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Test Post]]></title><description><![CDATA[테스트용 블로그 테스트용 게시물입니다.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/test-post/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/test-post/</guid><pubDate>Fri, 02 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;테스트용 블로그&lt;/h1&gt;
&lt;p&gt;테스트용 게시물입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello Gatsby!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item></channel></rss>